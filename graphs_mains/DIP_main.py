import os
import sys
sys.path.append( os.getcwd() +"//..")
import featuresList
from features_calculator import featuresCalculator
from learning.TagsLoader import TagsLoader
import main_manager as mm
import numpy as np
currentDirectory = str(os.getcwd())

if __name__ == "__main__":
    np.random.seed(123)
    #step 1: features calculate
    wdir = os.getcwd()
    file_in = str(wdir) + r'/../data/directed/DIP/input/DIP.txt'

    output_dir = str(wdir) + r'/../data/directed/DIP/features/take_connected'

    calculator = featuresCalculator()
    features_list = featuresList.featuresList(directed=True, analysisType='nodes').getFeatures()
    features_list.remove('kcore')
    features_list.remove('flow')
    features_list.remove('ab')
    features_list.remove('motif4')
    result = calculator.calculateFeatures(features_list, file_in, output_dir, directed=True, analysisType='nodes')


    # step 2: learning phase
    all_MF_classifications = ['0005326', '0005261', '0019215', '0004016', '0001076', '0019911', '0003913', '0016866',
                              '0004812', '0005544', '0003712', '0000166', '0016740', '0004715', '0016746', '0004896',
                              '0005319', '0004383', '0003924', '0008173', '0045182', '0005253', '0008066', '0015144',
                              '0003777', '0016757', '0004553', '0004620', '0016298', '0005126', '0030337', '0005125',
                              '0008009', '0005083', '0005085', '0015464', '0008483', '0019212', '0005488', '0003676',
                              '0003677', '0003678', '0008168', '0005024', '0004857', '0042626', '0008083', '0008081',
                              '0003724', '0009008', '0003779', '0019239', '0008236', '0003774', '0000981', '0003723',
                              '0016787', '0005132', '0008017', '0016301', '0016788', '0019104', '0003824', '0003823',
                              '0016832', '0004842', '0016779', '0008092', '0016836', '0004532', '0016831', '0004721',
                              '0016462', '0015171', '0005249', '0005245', '0003729', '0005243', '0004601', '0003743',
                              '0016791', '0016799', '0005201', '0004520', '0005200', '0008233', '0008234', '0008237',
                              '0016491', '0004529', '0046933', '0016829', '0004521', '0015276', '0005509', '0003690',
                              '0005160', '0003756', '0015926', '0015925', '0005215', '0005216', '0008324', '0008289',
                              '0005031', '0030414', '0004867', '0003964', '0004869', '0016854', '0005184', '0016853',
                              '0004518', '0003697', '0003688', '0016407', '0004190', '0005516', '0005515', '0003899',
                              '0005102', '0003682', '0003684', '0008047', '0019203', '0019200', '0019201', '0019207',
                              '0019204', '0019208', '0019209', '0030246', '0005164', '0005165', '0004872', '0004871',
                              '0005484', '0019763', '0004879', '0005198', '0003735', '0004672', '0016209', '0005179',
                              '0019210', '0019213', '0008135', '0016160', '0030234', '0004930', '0008191', '0016874',
                              '0003746', '0003909', '0004802', '0003747', '0003700', '0004645', '0015078', '0022857',
                              '0019199']
    all_BP_classifications = ['0006479','0051169','0008104','0019220','0019221','0002504','0006473','0007596','0019229',
                              '0006778','0007292','0001501','0006820','0007165','0007166','0007492','0007169','0007005',
                              '0006636','0007517','0000003','0000165','0040029','0006308','0006732','0048512','0006260',
                              '0022904','0006096','0001906','0007178','0016192','0019724','0006766','0030101','0006936',
                              '0006281','0007605','0007606','0007601','0007600','0006605','0030879','0007283','0007610',
                              '0006401','0006839','0009628','0003008','0000910','0007160','0009607','0044707','0009605',
                              '0009299','0007379','0009566','0000398','0042558','0002376','0019538','0006259','0006378',
                              '0043574','0006124','0006457','0031497','0022602','0006928','0009063','0006807','0042742',
                              '0050828','0035556','0050789','0008219','0016049','0051180','0006206','0006886','0006887',
                              '0051189','0016043','0008643','0065007','0006310','0006367','0006366','0006369','0006368',
                              '0007186','0032543','0006909','0006119','0019882','0006461','0006629','0006418','0008015',
                              '0006812','0006811','0050790','0006817','0007126','0006950','0006956','0001678','0006955',
                              '0007059','0034341','0019748','0016070','0008652','0016072','0006897','0006417','0009950',
                              '0016079','0050896','0006898','0006357','0006351','0006109','0006633','0015931','0006631',
                              '0006637','0008152','0006635','0006869','0007498','0030154','0009790','0006968','0007041',
                              '0009653','0007502','0007049','0009719','0006139','0007254','0007263','0007259','0006810',
                              '0006508','0009948','0008380','0008037','0040011','0006644','0008283','0050877','0009987',
                              '0005975','0008202','0008203','0019236','0051090','0005977','0006338','0005996','0051726',
                              '0007249','0001816','0019233','0006907','0048731','0006144','0032502','0009187','0016337',
                              '0042116','0019722','0042592','0006099','0006098','0007270','0006091','0001525','0007274',
                              '0007067','0007276','0006094','0007389','0050909','0040007','0006486','0006325','0006521',
                              '0006520','0009636','0032989','0043066','0006874','0006790','0006403','0006809','0006468',
                              '0019740','0006865','0019219','0006917','0006915','0006464','0006858','0000375','0009058',
                              '0009110','0007269','0007268','0007155','0007154','0009056','0051179','0002446','0006497',
                              '0007507','0007010','0006996','0007399','0007398','0030097','0006399','0006796','0044085',
                              '0007267','0005976','0015031','0008105','0006798','0006412','0007608','0006397']
    all_CC_classifications = ['0005730','0005635','0005783','0005794','0030425','0031012','0043226','0042175','0045202',
                              '0005929','0005811','0000228','0005815','0005874','0031201','0030054','0015629','0005737',
                              '0045177','0009536','0005615','0005743','0005834','0016021','0016020','0005777','0005739',
                              '0030529','0005654','0043005','0030424','0005694','0005856','0016023','0045111','0045211',
                              '0005886','0030120','0042995','0005840','0043234','0031594','0032991','0042734','0032993',
                              '0045298','0043025','0005829','0005578','0044464','0045259','0005622','0005764','0005773',
                              '0005576','0005618','0019814','0005768','0005634']
    classification_DIP_result = ['0004016','0003712','0016740','0004715','0016746','0003924','0016757','0004620',
                                 '0005126','0005125','0008009','0005083','0005085','0005488','0003676','0003677',
                                 '0008168','0008083','0003779','0008236','0000981','0003723','0016787','0016301',
                                 '0004842','0016779','0016836','0016831','0004721','0016462','0005200','0008234',
                                 '0008237','0016491','0016829','0005509','0005215','0004867','0016854','0016407',
                                 '0005516','0005515','0005102','0003682','0004872','0004871','0004879','0004672',
                                 '0019213','0004930','0016874','0003700','0022857']
    ml_algos = ['adaBoost', 'RF', 'L-SVM', 'RBF-SVM']
    directory_tags_path = str(wdir) + r'/../data/directed/DIP/tags/MF/'
    result_path = str(wdir) + r'/../data/directed/DIP/results/features_only/MF/'
    tagsLoader = TagsLoader(directory_tags_path, classification_DIP_result)
    tagsLoader.Load()
    #
    #
    gnx = result[0]
    map_fetures = result[1]
    number_of_learning_for_mean = 1.0
    save_clf_file_name = result_path + r'clf/'
    load_clf_file_name = None
    random_state = 1

    deep = False
    if (deep):
        mm.deepLearning(gnx, map_fetures, number_of_learning_for_mean=number_of_learning_for_mean,
                        classifications=classification_DIP_result,
                        tags_loader=tagsLoader,
                        result_path=result_path,
                        random_state=random_state)
    else:
        mm.machineLearning(gnx, map_fetures, number_of_learning_for_mean=number_of_learning_for_mean,
                           classifications=classification_DIP_result,
                           ml_algos=ml_algos,
                           tags_loader=tagsLoader,
                           result_path=result_path)


